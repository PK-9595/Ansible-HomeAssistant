---
# Install python so ansible can run using its other modules
- name: Install python using raw module
  hosts: all
  become: true
  gather_facts: false
  any_errors_fatal: true # Stop entire playbook if this play fails
  tasks:

    - name: Check OS
      raw: cat /etc/os-release # Store OS information in a variable to use in subsequent tasks
      register: os_release
      changed_when: false
      failed_when: "'Debian' not in os_release.stdout and 'Ubuntu' not in os_release.stdout and 'Raspbian' not in os_release.stdout"

    - name: Check if python is installed
      raw: python3 --version
      register: python_check
      changed_when: false

    - name: Install python using raw module
      raw: apt update && apt install python3 -y
      when: python_check.rc != 0

# Disable password based SSH for security reasons
- name: Disable password authentication for SSH, and use public key authentication instead
  hosts: all
  become: true
  tasks:

    - name: Ensure password authentication is disabled in /etc/ssh/sshd_config
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication no'
        state: present
        backup: yes
      register: disable_password_auth

    - name: Ensure public key authentication is enabled in sshd_config
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PubkeyAuthentication'
        line: 'PubkeyAuthentication yes'
        state: present
      register: enable_pubkey_auth

    - name: Reload SSH to apply configuration changes
      ansible.builtin.service:
        name: ssh
        state: reloaded
      when: disable_password_auth.changed or enable_pubkey_auth.changed

# Update System & Install Useful Packages
- name: Update OS and Install Useful CLI Tools on Debian-Based Systems
  hosts: all
  become: true
  any_errors_fatal: true # Stop entire playbook if this play fails
  tasks:

    - name: Update APT package cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Upgrade all installed packages
      ansible.builtin.apt:
        upgrade: full
        force_apt_get: yes

    - name: Remove unused packages
      ansible.builtin.apt:
        autoremove: yes

    - name: Install network-manager package
      ansible.builtin.apt:
        name: network-manager
        state: present

    - name: Install snapd package
      ansible.builtin.apt:
        name: snapd
        state: present

    - name: Install btop CLI tool using snap
      community.general.snap:
        name: btop
        state: present
      environment:
        PATH: "{{ ansible_env.PATH }}:/snap/bin"

    - name: Install tree CLI tool
      ansible.builtin.apt:
        name: tree
        state: present

    - name: Install fzf CLI tool
      ansible.builtin.apt:
        name: fzf
        state: present

    - name: Install tldr CLI tool
      ansible.builtin.apt:
        name: tldr
        state: present

    - name: Install neovim package
      ansible.builtin.apt:
        name: neovim
        state: present

    - name: Install neofetch package
      ansible.builtin.apt:
        name: neofetch
        state: present

    - name: Install rdp
      ansible.builtin.apt:
        name: xrdp
        state: present

# Prevent rfkill from blocking wifi on startup - common on raspberry pi
- name: Allow wifi/bluetooth on start - insert 'rfkill unblock wifi' into /etc/rc.local
  hosts: all
  become: true
  any_errors_fatal: true # Stop entire playbook if this play fails
  tasks:

    - name: Add 'rfkill unblock wifi' before 'exit 0' in /etc/rc.local file
      ansible.builtin.lineinfile:
        path: /etc/rc.local
        regexp: '^rfkill unblock wifi;$'
        insertbefore: '^exit 0'
        line: 'rfkill unblock wifi;'
        create: no

    - name: Add 'rfkill unblock bluetooth' before 'exit 0' in /etc/rc.local file
      ansible.builtin.lineinfile:
        path: /etc/rc.local
        regexp: '^rfkill unblock bluetooth;$'
        insertbefore: '^exit 0'
        line: 'rfkill unblock bluetooth;'
        create: no

# Configure environment for user preference
- name: Configure User Environment
  hosts: all
  tasks:

    - name: Configure default editor and visual text editor and add /snap/bin to PATH in ~/.bashrc
      ansible.builtin.lineinfile:
        path: /home/{{ansible_user}}/.bashrc
        line: "{{ item.line }}"
        regexp: "{{ item.regexp }}"
        insertbefore: BOF
        state: present
      loop:
        - { line: 'export PATH=${PATH}:/snap/bin;', regexp: '^export PATH=${PATH}:/snap/bin;$'}
        - { line: 'export EDITOR=vim;', regexp: '^export EDITOR=vim;$'}
        - { line: 'export VISUAL=vim;', regexp: '^export VISUAL=vim;$'}

    - name: Get ~/.bash_profile to source from ~/.bashrc
      ansible.builtin.lineinfile:
        path: /home/{{ansible_user}}/.bash_profile
        regexp: '^source .bashrc$'
        line: 'source .bashrc'
        insertafter: BOF
        state: present

    - name: Change default shell for user to bash
      ansible.builtin.user:
        name: "{{ansible_user}}"
        shell: /bin/bash

# Setup RDP
- name: Setup RDP
  hosts: all
  tasks:

    - name: Enable and start xrdp service
      ansible.builtin.systemd:
        name: xrdp
        enabled: true
        state: started

# docker setup
- name: Setup Docker
  hosts: all
  become: true
  any_errors_fatal: true # Stop entire playbook if this play fails
  tasks:

    - name: Download Docker Installation Script
      ansible.builtin.get_url:
        url: "{{DOCKER_INSTALLATION_SCRIPT_URL}}"
        dest: "/tmp/{{DOCKER_INSTALLATION_SCRIPT_NAME}}"
        mode: '0755'
        force: true # Always download even if already present

    - name: Check if installation script is new
      ansible.builtin.command:
        cmd: "diff /tmp/{{ DOCKER_INSTALLATION_SCRIPT_NAME }} /home/{{ ansible_user }}/{{ DOCKER_INSTALLATION_SCRIPT_NAME }}"
      register: diff_docker_installation_script_result
      ignore_errors: true

    - name: Replace Docker Installation Script If Different
      when: diff_docker_installation_script_result.rc != 0
      ansible.builtin.copy:
        src: "/tmp/{{ DOCKER_INSTALLATION_SCRIPT_NAME }}"
        remote_src: true
        dest: "/home/{{ ansible_user }}/{{ DOCKER_INSTALLATION_SCRIPT_NAME }}"

    - name: Run Docker Installation Script If Different
      when: diff_docker_installation_script_result.rc != 0
      ansible.builtin.shell: "sh /home/{{ ansible_user }}/{{ DOCKER_INSTALLATION_SCRIPT_NAME }}"
      ignore_errors: true

    - name: Download Docker Compose Binary
      ansible.builtin.get_url:
        url: "{{ DOCKER_COMPOSE_BINARY_URL_PREFIX }}{{ ansible_system | lower }}-{{ ansible_architecture }}"
        dest: /tmp/docker-compose
        mode: '0755'
        force: true # Always download even if already present

    - name: Check If Docker Compose Binary Is Different
      ansible.builtin.command:
        cmd: "diff /tmp/docker-compose /usr/local/bin/docker-compose"
      register: diff_docker_compose_result
      ignore_errors: true

    - name: Replace Docker Compose Binary If New
      when: diff_docker_compose_result.rc != 0
      ansible.builtin.copy:
        src: /tmp/docker-compose
        remote_src: true
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Add User To Docker Group
      ansible.builtin.user:
        name: "{{ansible_user}}"
        groups: docker
        append: yes

    - name: Enable & Start Docker Service
      ansible.builtin.service:
        name: docker
        enabled: true
        state: started

    - name: Run 'hello-world' Container To Test If Docker Is Working
      community.docker.docker_container:
        name: hello-world
        image: hello-world
        state: started

- name: Setup Home Assistant Required Directories & Files
  hosts: all
  any_errors_fatal: true # Stop entire playbook if this play fails
  tasks:
  
    # Docker & Variable Files
    - name: Copy docker-compose file and .env files into home directory
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: '0644'
      loop:
        - {src: "{{ playbook_dir }}/../Docker/docker-compose.yml", dest: "/home/{{ ansible_user }}"}
        - {src: "{{ playbook_dir }}/../.env", dest: "/home/{{ ansible_user }}"}

    # Home Assistant Files & Directories
    - name: Set up homeAssistant directory
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: "{{ item.state }}"
        mode: "{{ item.mode | default('0755')}}"
      loop:
        - {path: "/home/{{ ansible_user }}/homeAssistant", state: "directory"}
        - {path: "/home/{{ ansible_user }}/homeAssistant/automations", state: "directory"}
        - {path: "/home/{{ ansible_user }}/homeAssistant/scripts", state: "directory"}
        - {path: "/home/{{ ansible_user }}/homeAssistant/scenes", state: "directory"}

    # Zigbee2MQTT Files & Directories
    - name: Set up zigbee2mqtt directory
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: "{{ item.state }}"
        mode: "{{ item.mode | default('0755')}}"
      loop:
        - {path: "/home/{{ ansible_user }}/zigbee2mqtt/data", state: "directory"}

    # Mosquitto Files & Directories
    - name: Set up mosquitto directory
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: "{{ item.state }}"
        mode: "{{ item.mode | default('0755')}}"
      loop:
        - {path: "/home/{{ ansible_user }}/mosquitto/config", state: "directory"}
        - {path: "/home/{{ ansible_user }}/mosquitto/data", state: "directory"}
        - {path: "/home/{{ ansible_user }}/mosquitto/log", state: "directory"}
        - {path: "/home/{{ ansible_user }}/mosquitto/config/mosquitto.conf", state: "file", mode: "0644"}

    # Mariadb Files & Directories
    - name: Set up mariadb directory
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: "{{ item.state }}"
        mode: "{{ item.mode | default('0755')}}"
      loop:
        - {path: "./mariadb", state: "directory"}

    # NodeRed Files & Directories
    - name: Set up nodered directory
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: "{{ item.state }}"
        mode: "{{ item.mode | default('0755')}}"
      loop:
        - {path: "./nodered", state: "directory"}

    # ESPHome Files & Directories
    - name: Set up esphome directory
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: "{{ item.state }}"
        mode: "{{ item.mode | default('0755')}}"
      loop:
        - {path: "./esphome", state: "directory"}

  
- name: Start and stop containers to initialize home assistant config files
  hosts: all
  become: false
  any_errors_fatal: true # Stop entire playbook if this play fails
  tasks:

    - name: Use docker-compose up
      ansible.builtin.shell: "docker-compose --env-file .env up -d"
      args:
        chdir: "/home/{{ ansible_user }}"

    - name: Wait for configuration files to be initialized
      ansible.builtin.wait_for:
        path: "{{ item.path }}"
        state: "{{ item.state | default('present')}}"
        timeout: "{{ item.timeout | default('300')}}"
      loop:
        - {path: "/home/{{ ansible_user }}/homeAssistant/configuration.yaml"}
        - {path: "/home/{{ ansible_user }}/zigbee2mqtt/data/configuration.yaml"}

    - name: Use docker-compose down
      ansible.builtin.shell: "docker-compose down"


- name: Amend home assistant configuration
  hosts: all
  become: true
  any_errors_fatal: true # Stop entire playbook if this play fails
  tasks:

    # Mosquitto configuration files
    - name: Ensure listener line & allow_anonymous line is present in mosquitto.conf file
      ansible.builtin.lineinfile:
        path: /home/{{ ansible_user }}/mosquitto/config/mosquitto.conf
        line: "{{ item.line }}"
        state: "{{ item.state | default('present') }}"
      loop:
        - {line: "listener 1883 0.0.0.0"}
        - {line: "allow_anonymous true"}

    # Zigbee2MQTT configuration files
    - name: Use correct zigbee dongle device file & set extra metadata (for home assistant) to be published in messages
      ansible.builtin.lineinfile:
        path: /home/{{ ansible_user }}/zigbee2mqtt/data/configuration.yaml
        regex: "{{ item.regex }}"
        line: "{{ item.line }}"
        state: "{{ item.state | default('present') }}"
      loop:
        - {regex: '^\s*port: /dev/tty', line: "  port: {{ ZIGBEE_DONGLE }}  # zigbee receiver device"}
        - {regex: '^\s*homeassistant:', line: "homeassistant: true # Publishes messages with extra metadata compatible with home assistant"}
        - {regex: '^\s*server:', line: "  server: mqtt://mosquitto-HA:1883 # Where to send mqtt messages to"}

    # HomeAssistant configuration files
    - name: Set configuration for homeAssistant
      ansible.builtin.lineinfile:
        path: "/home/{{ ansible_user }}/homeAssistant/configuration.yaml"
        regex: "{{ item.regex }}"
        line: "{{ item.line }}"
        state: "{{ item.state | default('present') }}"
      loop:
        - {regex: '^\s*automation:', line: "automation: !include_dir_merge_list automations/"}
        - {regex: '^\s*script:', line: "script: !include_dir_merge_list scripts/"}
        - {regex: '^\s*scene:', line: "scene: !include_dir_merge_list scenes/"}
        
    - name: Add Xiaomi Miot integration 
      ansible.builtin.blockinfile:
        path: "/home/{{ ansible_user }}/homeAssistant/configuration.yaml"
        block: |
          # Add xiaomi miot integration
          shell_command:
            update_xiaomi_miot: |-
              wget -O - https://get.hacs.vip | DOMAIN=xiaomi_miot bash -
        insertafter: EOF


- name: Setup HACS for home assistant # HACS installation script does some finding of the correct working directory
  hosts: all
  any_errors_fatal: true
  tasks:

    - name: Check if HACS is already installed
      ansible.builtin.stat:
        path: /home/{{ ansible_user }}/homeAssistant/config/custom_components/hacs
      register: hacs_installed

    - name: Download HACS if it's not yet installed
      when: not hacs_installed.stat.exists
      ansible.builtin.shell: "wget -O - https://get.hacs.xyz | bash -"
      args:
        chdir: "/home/{{ ansible_user }}/homeAssistant"


- name: Start docker containers and run home assistant # Final Play
  hosts: all
  become: false
  any_errors_fatal: true # Stop entire playbook if this play fails
  tasks:

    - name: Use docker-compose up
      ansible.builtin.shell: "docker-compose --env-file .env up -d"
      args:
        chdir: "/home/{{ ansible_user }}"

# Includes tasks vs roles